"""Database models for qq2.

On init, SQLAlchemy will use these classes to generate tables in the database. 
Once created, each class can be used to run queries on their respective table.

Typical usage:
    from app.models import User
    users = User.query.all()
"""
import flask_login
import sqlalchemy as alq
from app import extensions as ext

# default behavior for non-nullable foreign keys (e.g., FK=user.id)
CASCADE = 'all, delete-orphan'

class User(flask_login.UserMixin, ext.db.Model):
    """Database model for qq2 users.

    Note that login relies on this table, so do not remove it without first
    setting up a new auth table, or removing the @login_required decorator
    from the app.routes module.
    
    Attributes:
        id: The user's ID in the system. Autogenerated and autoincrements.
        email: The user's email. Must be unique.
        password: The user's password. Stored as salted hash.
        username: The user's username. 
        bio: A short description by the user.
        created_at: When the account was registered. Autogenerated.
        posts: A list of all the user's posts (1:N).
        comments: A list of all the user's comments (1:N).
    """
    id = alq.Column(alq.Integer, primary_key=True)
    email = alq.Column(alq.String(80), nullable=False, unique=True)
    password = alq.Column(alq.String(100), nullable=False)
    username = alq.Column(alq.String(100), nullable=False)
    bio = alq.Column(alq.Text)
    created_at = alq.Column(alq.DateTime(timezone=True),
                            server_default=alq.func.now()) # SQLAlchemy, pylint: disable=not-callable
    # active = alq.Column(alq.Boolean, nullable=False, server_default=sql.expression.true())
    posts = ext.db.relationship('Post', backref='user', cascade=CASCADE)
    comments = ext.db.relationship('Comment', backref='user', cascade=CASCADE)

    def __repr__(self):
        return f'<User "{self.username}" ({self.email})>'

# bridge for M:N relationship
post_tag = ext.db.Table('post_tag',
                        alq.Column('post_id', alq.Integer, alq.ForeignKey('post.id')),
                        alq.Column('tag_id',  alq.Integer, alq.ForeignKey('tag.id')))

class Post(ext.db.Model): # pylint: disable=too-few-public-methods
    """Database model for user posts. Deprecated."""
    id = alq.Column(alq.Integer, primary_key=True)
    title = alq.Column(alq.String(100))
    content = alq.Column(alq.Text)
    created_at = alq.Column(alq.DateTime(timezone=True), server_default=alq.func.now()) # SQLAlchemy, pylint: disable=not-callable
    user_id = alq.Column(alq.Integer, alq.ForeignKey('user.id'), nullable=False)
    comments = ext.db.relationship('Comment', backref='post')
    tags = ext.db.relationship('Tag', secondary=post_tag, backref='posts')

    def __repr__(self):
        return f'<Post "{self.title}">'

class Tag(ext.db.Model): # pylint: disable=too-few-public-methods
    """Database model for post tags. Deprecated."""
    id = alq.Column(alq.Integer, primary_key=True)
    name = alq.Column(alq.String(50), nullable=False)

    def __repr__(self):
        return f'<Tag "{self.name}">'

class Comment(ext.db.Model): # pylint: disable=too-few-public-methods
    """Database model for post comments. Deprecated."""
    id = alq.Column(alq.Integer, primary_key=True)
    content = alq.Column(alq.Text)
    created_at = alq.Column(alq.DateTime(timezone=True), server_default=alq.func.now()) # SQLAlchemy, pylint: disable=not-callable
    post_id = alq.Column(alq.Integer, alq.ForeignKey('post.id'), nullable=False)
    user_id = alq.Column(alq.Integer, alq.ForeignKey('user.id'), nullable=False)

    def __repr__(self):
        return f'<Comment "{self.content[:20]} \
                {'...' if len(self.content) > 20 else ''}">'
