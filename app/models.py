"""Database models for qq2.

On init, SQLAlchemy will use these classes to generate tables in the database. 
Once created, each class can be used to run queries on their respective table.

Typical usage:
    from app.models import User
    users = User.query.all()
"""
import flask_login
import sqlalchemy as alq
from app import extensions as ext

# default behavior for non-nullable foreign keys (e.g., FK=user.id)
CASCADE = 'all, delete-orphan'

class User(flask_login.UserMixin, ext.db.Model):
    """Database model for qq2 users.

    Note that login relies on this table, so do not remove it without first
    setting up a new auth table, or removing the @login_required decorator
    from the app.routes module.
    
    Attributes:
        id: The user's ID in the system. Autogenerated and autoincrements.
        email: The user's email. Must be unique.
        password: The user's password. Stored as salted hash.
        username: The user's username. 
        bio: A short description by the user.
        created_at: When the account was registered. Autogenerated.
        posts: A list of all the user's posts (1:N).
        comments: A list of all the user's comments (1:N).
    """
    id = alq.Column(alq.Integer, primary_key=True)
    email = alq.Column(alq.String(80), nullable=False, unique=True)
    password = alq.Column(alq.String(100), nullable=False)
    username = alq.Column(alq.String(100), nullable=False)
    bio = alq.Column(alq.Text)
    created_at = alq.Column(alq.DateTime(timezone=True),
                            server_default=alq.func.now()) # SQLAlchemy, pylint: disable=not-callable
    posts = ext.db.relationship('Post', backref='user', cascade=CASCADE)
    comments = ext.db.relationship('Comment', backref='user', cascade=CASCADE)

    def __repr__(self):
        return f'<User {self.id}: "{self.username}" ({self.email})>'

# bridge for M:N relationship
post_tag = ext.db.Table('post_tag',
             alq.Column('post_id', alq.Integer, alq.ForeignKey('post.id')),
             alq.Column('tag_id', alq.Integer, alq.ForeignKey('tag.id')))

class Post(ext.db.Model): # pylint: disable=too-few-public-methods
    """Database model for user posts.
    
    Attributes:
        id: The posts's ID in the system. Autogenerated and autoincrements.
        title: The title of the post.
        content: The text of the post.
        created_at: When the post was created. Autogenerated.
        user_id: The poster. Post gets deleted with user (N:1).
        comments: A list of all the comments on the post (1:N).
        (post_tag) tags: A list of all tags on the post (M:N).
    """
    id = alq.Column(alq.Integer, primary_key=True)
    title = alq.Column(alq.String(100), nullable=False)
    content = alq.Column(alq.Text, nullable=False)
    created_at = alq.Column(alq.DateTime(timezone=True),
                            server_default=alq.func.now()) # SQLAlchemy, pylint: disable=not-callable
    user_id = alq.Column(alq.Integer, alq.ForeignKey('user.id'), nullable=False)
    comments = ext.db.relationship('Comment', backref='post', cascade=CASCADE)
    tags = ext.db.relationship('Tag', secondary=post_tag, backref='posts')

    def __repr__(self):
        return f'<Post {self.id}: "{self.title}">'

class Tag(ext.db.Model): # pylint: disable=too-few-public-methods
    """Database model for post tags.
    
    Attributes:
        id: The tag's ID in the system. Autogenerated and autoincrements.
        name: The text of the tag.
        (post_tag) posts: A list of all posts with this tag (M:N).
    """
    id = alq.Column(alq.Integer, primary_key=True)
    name = alq.Column(alq.String(50), nullable=False, unique=True)

    def __repr__(self):
        return f'{self.name}'

class Comment(ext.db.Model): # pylint: disable=too-few-public-methods
    """Database model for post comments.
    
    Attributes:
        id: The posts's ID in the system. Autogenerated and autoincrements.
        content: The text of the comment.
        created_at: When the comment was created. Autogenerated.
        post_id: The post commented on. Comment gets deleted with post (N:1).
        user_id: The commentor. Comment gets deleted with user (N:1).
    """
    id = alq.Column(alq.Integer, primary_key=True)
    content = alq.Column(alq.Text, nullable=False)
    created_at = alq.Column(alq.DateTime(timezone=True),
                            server_default=alq.func.now()) # SQLAlchemy, pylint: disable=not-callable
    post_id = alq.Column(alq.Integer, alq.ForeignKey('post.id'), nullable=False)
    user_id = alq.Column(alq.Integer, alq.ForeignKey('user.id'), nullable=False)

    def __repr__(self):
        return f'<Comment {self.id}: "{self.content[:20]}\
            {"..." if len(self.content) > 20 else ""}">'
